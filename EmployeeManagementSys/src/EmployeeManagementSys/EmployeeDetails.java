/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package EmployeeManagementSys;

import java.sql.*;
import java.time.Duration;
import java.time.LocalDate;
import java.time.Period;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class EmployeeDetails extends javax.swing.JFrame {

    /**
     * Creates new form employeeDetails
     */
    public EmployeeDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEmpNum = new javax.swing.JTextField();
        txtEmpField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Number", "Name", "Designation", "DOJ"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Employee Details");

        jButton1.setText("Show Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Employee Number:");

        jLabel3.setText("Field:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtEmpNum, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                    .addComponent(txtEmpField)))
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtEmpNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtEmpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public Connection databaseConnection() {
        Connection con = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/employee_data", "root", "");
        }
        catch(Exception ex) {
        }
        return con;
    }
    
    protected void displayExperience(String employeeNo) {
        Connection con = databaseConnection();
        PreparedStatement query = null;
        DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
        LocalDate today = LocalDate.now();
        df.setColumnCount(1);
        df.addColumn("Experience");
        try {
            query = con.prepareStatement("select doj from employee_details where employee_no = ?");
            query.setString(1, employeeNo);
            ResultSet rs = query.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            int count = 0;
            
            while(rs.next()) {
                Vector v = new Vector();
                for(int i=0; i<rss.getColumnCount(); i++) {
                    LocalDate doj = rs.getDate("doj").toLocalDate();
//                    Duration diff = Duration.between(today, doj);
                    Period  diff  = Period.between(doj, today);
                    int totalExp = diff.getMonths() + diff.getDays()/30 + diff.getYears()*12;
                    v.add(totalExp + " months" );
                }
                count++;
                //df.addRow(v);
                df.addColumn("Experience", v);
            }
            if(count == 0) {
                JOptionPane.showMessageDialog(this, "Employee number does not exist");
                throw new Exception("Invalid Employee Number");
            }
        } catch (SQLException ex) {
            Logger.getLogger(EmployeeDetails.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(EmployeeDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    protected void displayDetails(String employeeNo, String field) {
        Connection con = databaseConnection();
        PreparedStatement query = null;
        DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
        LocalDate today = LocalDate.now();
        df.setRowCount(0);
        df.setColumnCount(0);
        
        try {
            if(field.equals("Name")){
                query = con.prepareStatement("select employee_name,doj from employee_details where employee_no = ?");
                df.addColumn("Name");
                df.addColumn("Experience");
            }
            else if(field.equals("Designation")) {
                query = con.prepareStatement("select designation,doj from employee_details where employee_no = ?");
                df.addColumn("Designation");
                df.addColumn("Experience");
            }
            else {
                JOptionPane.showMessageDialog(this, "Please enter correct Field value");
                throw new Exception("Invalid Field Value");
            }
            query.setString(1, employeeNo);
            ResultSet rs = query.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            int count = 0;
            while(rs.next()) {
                Vector v = new Vector();
                for(int i=0; i<rss.getColumnCount(); i++) {
                    v.add(rs.getString(1));
                    
                    LocalDate doj = rs.getDate(2).toLocalDate();
                    Period diff = Period.between(doj, today);
                    int totalExp = diff.getMonths() + diff.getDays()/30 + diff.getYears()*12;
                    v.add(totalExp + " months");
                }
                df.addRow(v);
                count++;
            }
            if(count == 0) {
                JOptionPane.showMessageDialog(this, "Please enter correct Employee Number");
                throw new Exception("Invalid Employee Number");
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(EmployeeDetails.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(EmployeeDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String employeeNo = txtEmpNum.getText();
        String field = txtEmpField.getText();
        
        if(employeeNo.length() == 0 || field.length() == 0) {
            try {
                JOptionPane.showMessageDialog(this, "Please enter Employee number");
                txtEmpNum.requestFocus();
                throw new Exception("Invalid number");
            } catch (Exception ex) {
                Logger.getLogger(EmployeeDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            displayDetails(employeeNo, field);
//            displayExperience(employeeNo);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtEmpField;
    private javax.swing.JTextField txtEmpNum;
    // End of variables declaration//GEN-END:variables
}
